// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package storage

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createBudget = `-- name: CreateBudget :one
INSERT INTO budgets (category, amount, currency)
VALUES ($1, $2, $3)
RETURNING
    id,
    category,
    amount,
    spent,
    currency,
    created_at,
    updated_at,
    deleted_at
`

type CreateBudgetParams struct {
	Category string
	Amount   float64
	Currency string
}

func (q *Queries) CreateBudget(ctx context.Context, arg CreateBudgetParams) (Budget, error) {
	row := q.db.QueryRowContext(ctx, createBudget, arg.Category, arg.Amount, arg.Currency)
	var i Budget
	err := row.Scan(
		&i.ID,
		&i.Category,
		&i.Amount,
		&i.Spent,
		&i.Currency,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteBudget = `-- name: DeleteBudget :exec
UPDATE budgets
SET deleted_at = $2
WHERE id = $1
`

type DeleteBudgetParams struct {
	ID        uuid.UUID
	DeletedAt sql.NullInt32
}

func (q *Queries) DeleteBudget(ctx context.Context, arg DeleteBudgetParams) error {
	_, err := q.db.ExecContext(ctx, deleteBudget, arg.ID, arg.DeletedAt)
	return err
}

const getBudgetById = `-- name: GetBudgetById :one
SELECT id, category, amount, spent, currency, created_at, updated_at, deleted_at FROM budgets
WHERE id = $1
`

func (q *Queries) GetBudgetById(ctx context.Context, id uuid.UUID) (Budget, error) {
	row := q.db.QueryRowContext(ctx, getBudgetById, id)
	var i Budget
	err := row.Scan(
		&i.ID,
		&i.Category,
		&i.Amount,
		&i.Spent,
		&i.Currency,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getBudgets = `-- name: GetBudgets :many
SELECT id, category, amount, spent, currency, created_at, updated_at, deleted_at FROM budgets
`

func (q *Queries) GetBudgets(ctx context.Context) ([]Budget, error) {
	rows, err := q.db.QueryContext(ctx, getBudgets)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Budget
	for rows.Next() {
		var i Budget
		if err := rows.Scan(
			&i.ID,
			&i.Category,
			&i.Amount,
			&i.Spent,
			&i.Currency,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBudget = `-- name: UpdateBudget :one
UPDATE budgets
SET category=$2, amount=$3, currency=$4, updated_at=$5
WHERE id=$1
RETURNING
    id,
    category,
    amount,
    spent,
    currency,
    created_at,
    updated_at,
    deleted_at
`

type UpdateBudgetParams struct {
	ID        uuid.UUID
	Category  string
	Amount    float64
	Currency  string
	UpdatedAt sql.NullString
}

func (q *Queries) UpdateBudget(ctx context.Context, arg UpdateBudgetParams) (Budget, error) {
	row := q.db.QueryRowContext(ctx, updateBudget,
		arg.ID,
		arg.Category,
		arg.Amount,
		arg.Currency,
		arg.UpdatedAt,
	)
	var i Budget
	err := row.Scan(
		&i.ID,
		&i.Category,
		&i.Amount,
		&i.Spent,
		&i.Currency,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
